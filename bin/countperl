#!/usr/bin/perl

# $Header: /Users/matisse/Desktop/CVS2GIT/matisse.net.cvs/Perl-Metrics-Simple/bin/countperl,v 1.2 2006/11/24 04:23:43 matisse Exp $
# $Revision: 1.2 $
# $Author: matisse $
# $Source: /Users/matisse/Desktop/CVS2GIT/matisse.net.cvs/Perl-Metrics-Simple/bin/countperl,v $
# $Date: 2006/11/24 04:23:43 $
###############################################################################

use strict;
use warnings;
use Data::Dumper;
use lib '../lib';
use Perl::Metrics::Simple;
use Pod::Usage;
use Statistics::Basic::StdDev;
use Statistics::Basic::Mean;
use Statistics::Basic::Median;

pod2usage( -verbose => 1 ) if ( !@ARGV );
my $analzyer = Perl::Metrics::Simple->new;

my $analysis = $analzyer->analyze_files(@ARGV);

my $file_count    = $analysis->file_count;
my $package_count = $analysis->package_count;
my $sub_count     = $analysis->sub_count;
my $lines         = $analysis->lines;
my $main_stats    = $analysis->main_stats;
my $file_stats    = $analysis->file_stats;

my $summary_stats = $analysis->summary_stats;

print <<"EOS";

Perl files found:                $file_count

Counts
------
total lines:          $lines
lines of main code:   $main_stats->{lines}
packages found:       $package_count
subs/methods:         $sub_count

Subroutine/Method Size
----------------------
min:                  $summary_stats->{sub_length}->{min} lines
max:                  $summary_stats->{sub_length}->{max} lines
mean:                 $summary_stats->{sub_length}->{mean} lines
std. deviation:       $summary_stats->{sub_length}->{standard_deviation}
median:               $summary_stats->{sub_length}->{median}

McCabe Complexity
-----------------
Main code:
min:                  $summary_stats->{main_complexity}->{min}
max                   $summary_stats->{main_complexity}->{max}
mean:                 $summary_stats->{main_complexity}->{median}
std. deviation:       $summary_stats->{main_complexity}->{standard_deviation}
median:               $summary_stats->{main_complexity}->{median}

Subroutines/Methods:
min:                  $summary_stats->{sub_complexity}->{min}
max:                  $summary_stats->{sub_complexity}->{max}
avg:                  $summary_stats->{sub_complexity}->{median}
std. deviation:       $summary_stats->{sub_complexity}->{standard_deviation}
median:               $summary_stats->{sub_complexity}->{median}

EOS

my @sorted_subs = sort _by_complexity(), @{ $analysis->subs };
print join( "\t", 'complexity', 'sub', 'path', 'size' ), "\n";
foreach my $sub (@sorted_subs) {
    my %sub_hash = %{$sub};
    print join( "\t",
        @sub_hash{ 'mccabe_complexity', 'name', 'path', 'lines' } ),
      "\n";
}

exit;

sub _by_complexity {
    $b->{mccabe_complexity} <=> $a->{mccabe_complexity};
}
__END__
